apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: sterling-devops-deploy
  namespace: default
spec:
  params:
    - name: ibm-entitlement-key
      description: "IBM entitlement key. If not set, will use secret manager."
      type: string
      default: "false"
  tasks:
    - name: get-ibm-entitlement-key
      when:
        - input: "$(params.ibm-entitlement-key)"
          operator: in
          values: ["false"]
      taskRef:
        name: ibmcloud-secrets-manager-get
        kind: Task
      retries: 2
      params:
        - name: KEY_ID
          value: 968d7819-f2c5-7b67-c420-3c6bfd51521e
        - name: SECRETS_MANAGER_ENDPOINT_URL
          value: >-
            https://afa20521-cd75-4864-843f-e59fd0ffd49d.us-south.secrets-manager.appdomain.cloud

    - name: set-ibm-entitlement-key
      runAfter:
        - get-ibm-entitlement-key
      params:
        - name: ibm-entitlement-key
          value: "$(params.ibm-entitlement-key)"
      retries: 3
      taskSpec:
        params:
          - name: ibm-entitlement-key
        results:
          - name: effective-entitlement-key
            description: The resolved entitlement key
        steps:
          - name: echo-entitlement-key
            image: quay.io/devfile/universal-developer-image:latest
            script: |
              #!/usr/bin/env bash
              set -e
              if [ "$(params.ibm-entitlement-key)" == "false" ]; then
                echo "Using TechZone provided entitlement key"
                echo -n "$(tasks.get-ibm-entitlement-key.results.secret-value)" > $(results.effective-entitlement-key.path)
              else
                echo "Using user provided entitlement key"
                echo -n "$(params.ibm-entitlement-key)" > $(results.effective-entitlement-key.path)
              fi

    - name: sterling-install
      runAfter:
        - set-ibm-entitlement-key
      taskSpec:
        steps:
          - name: install-sterling
            image: quay.io/kishorec/sde:latest
            script: |
              #!/bin/bash
              set -e

              export ENTITLED_REGISTRY_KEY="$(tasks.set-ibm-entitlement-key.results.effective-entitlement-key)"
              export ANSIBLE_CONFIG=./ansible.cfg
              export SI_INSTANCEID=dev01
              export SI_VERSION=6.2.0.3

              echo "Cloning Sterling automation repository"
              git clone https://github.com/ckpkishore/ansible-ibm-sterling.git
              cd ansible-ibm-sterling

              ls -ltr

              # Set Helm version
              HELM_VERSION=v3.18.3

              # Download and extract Helm
              curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
              tar -zxvf helm.tar.gz

              # Move helm binary to a local bin directory (e.g., /workspace/bin) and add to PATH
              mkdir -p /workspace/bin
              mv linux-amd64/helm /workspace/bin/helm
              chmod +x /workspace/bin/helm

              # Add it to PATH
              export PATH="/workspace/bin:$PATH"

              # Verify installation
              helm version

              echo "Running Sterling install via Ansible..."
              ansible-playbook playbooks/deploy_sb2b.yml
              echo "Ansible playbook finished"

    - name: sterling-import-resources
      runAfter:
        - sterling-install
      taskSpec:
        params:
          - name: pod-name
            description: Name of the target pod
            default: s0-b2bi-asi-server-0
          - name: namespace
            description: Namespace of the pod
            default: sterling-b2bi-dev01-app
          - name: secret-name
            default: si-system-passphrase-secret
          - name: secret-key
            default: SYSTEM_PASSPHRASE
        steps:
          - name: fetch-configurations
            image: quay.io/openshift/origin-cli:4.15
            script: |
              #!/bin/sh
              set -e

              # Wait until pod is Ready
              echo "Waiting for pod $(params.pod-name) to be Ready..."
              until oc get pod $(params.pod-name) -n $(params.namespace) -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q True; do
                echo "ASI Pod not ready yet. Sleeping 30s..."
                sleep 30
              done
              echo "Pod $(params.pod-name) is Ready."

              echo "Extracting secret from OCP..."
              value=$(oc get secret -n $(params.namespace) "$(params.secret-name)" -o "jsonpath={.data.$(params.secret-key)}" | base64 -d)
              echo "The secret value is: $value"

              echo "Downloading TXExportConfig.xml from GitHub..."
              curl -sSL -o TXExportConfig.xml https://raw.githubusercontent.com/ckpkishore/sde/refs/heads/main/sfg/TXExportConfig.xml
              echo "Downloaded TXExportConfig.xml"

              sleep 10  

              echo "Copying TXExportConfig.xml to pod $(params.pod-name)..."
              oc cp TXExportConfig.xml $(params.namespace)/$(params.pod-name):/tmp/TXExportConfig.xml 
              echo "Copied TXExportConfig.xml"

              echo "Running import script inside pod $(params.pod-name)..."
              oc exec -n $(params.namespace) $(params.pod-name) \
                -- bash -c "/ibm/b2bi/install/tp_import/import.sh -input /tmp/TXExportConfig.xml -passphrase $value -update -errors errors.txt"
              echo "TXExportConfig.xml import complete"

              echo "Downloading customer_overrides.properties from GitHub..."
              curl -sSL -o customer_overrides.properties https://raw.githubusercontent.com/ckpkishore/sde/refs/heads/main/sfg/customer_overrides.properties
              echo "Downloaded customer_overrides.properties"

              sleep 10  

              echo "Importing customer_overrides.properties..."
              oc create configmap s0-b2bi-config-property --from-file=customer_overrides.properties -n $(params.namespace) --dry-run=client -o yaml | oc apply -f -
              echo "customer_overrides.properties import complete"

              echo "Downloading IBM_SDE_Troubleshooting_Agent.ipynb from GitHub..."
              curl -fSL -o IBM_SDE_Troubleshooting_Agent.ipynb https://raw.githubusercontent.com/ckpkishore/sde/refs/heads/main/notebook/IBM_SDE_Troubleshooting_Agent.ipynb
              echo "Downloaded IBM_SDE_Troubleshooting_Agent.ipynb"

              sleep 10  

              echo "Copying IBM_SDE_Troubleshooting_Agent.ipynb to pod $(params.pod-name)..."
              oc cp IBM_SDE_Troubleshooting_Agent.ipynb $(params.namespace)/$(params.pod-name):/tmp/IBM_SDE_Troubleshooting_Agent.ipynb
              echo "Copied IBM_SDE_Troubleshooting_Agent.ipynb"

              sleep 120           

    - name: sterling-restart
      runAfter:
        - sterling-import-resources
      taskSpec:
        params:
          - name: pod-name
            description: Name of the target pod
            default: s0-b2bi-asi-server-0
          - name: namespace
            description: Namespace of SFG
            default: sterling-b2bi-dev01-app
        steps:
          - name: stop-start
            image: quay.io/openshift/origin-cli:4.15
            script: |
              #!/bin/sh
              set -e

              echo "Stopping the application..."
              oc scale statefulset s0-b2bi-ac-server --replicas=0 -n $(params.namespace)
              oc scale statefulset s0-b2bi-api-server --replicas=0 -n $(params.namespace)
              oc scale statefulset s0-b2bi-asi-server --replicas=0 -n $(params.namespace)
              echo "Application stopped"

              echo "Starting the application..."
              oc scale statefulset s0-b2bi-ac-server --replicas=1 -n $(params.namespace)
              oc scale statefulset s0-b2bi-api-server --replicas=1 -n $(params.namespace)
              oc scale statefulset s0-b2bi-asi-server --replicas=1 -n $(params.namespace)

              NAMESPACE="$(params.namespace)"
              LABEL="statefulset.kubernetes.io/pod-name=$(params.pod-name)"


              # Step 1: Wait until the pod exists
              echo "Waiting for pod to be created..."
              until oc get pod -l "$LABEL" -n "$NAMESPACE" --no-headers 2>/dev/null | grep -q .; do
                sleep 120
              done

              # Step 2: Get the actual pod name
              POD_NAME=$(oc get pod -l "$LABEL" -n "$NAMESPACE" -o jsonpath='{.items[0].metadata.name}')

              # Step 3: Wait until the pod becomes ready
              echo "Pod found: $POD_NAME"
              until [ "$(oc get pod "$POD_NAME" -n "$NAMESPACE" -o jsonpath='{.status.containerStatuses[0].ready}' 2>/dev/null)" = "true" ]; do
                echo "Waiting for pod to become ready..."
                sleep 120
              done

              echo "Pod $POD_NAME is ready."

              echo "Application started"
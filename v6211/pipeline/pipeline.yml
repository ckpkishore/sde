apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: sterling-devops-deploy
  namespace: default
spec:
  params:
    - default: 'false'
      description: 'IBM entitlement key. If not set, will use secret manager.'
      name: ibm-entitlement-key
      type: string
  tasks:
    - name: get-ibm-entitlement-key
      params:
        - name: KEY_ID
          value: 968d7819-f2c5-7b67-c420-3c6bfd51521e
        - name: SECRETS_MANAGER_ENDPOINT_URL
          value: 'https://afa20521-cd75-4864-843f-e59fd0ffd49d.us-south.secrets-manager.appdomain.cloud'
      retries: 2
      taskRef:
        kind: Task
        name: ibmcloud-secrets-manager-get
      when:
        - input: $(params.ibm-entitlement-key)
          operator: in
          values:
            - 'false'
    - name: set-ibm-entitlement-key
      params:
        - name: ibm-entitlement-key
          value: $(params.ibm-entitlement-key)
      retries: 3
      runAfter:
        - get-ibm-entitlement-key
      taskSpec:
        metadata: {}
        params:
          - name: ibm-entitlement-key
            type: string
        results:
          - description: The resolved entitlement key
            name: effective-entitlement-key
            type: string
        spec: null
        steps:
          - computeResources: {}
            image: 'quay.io/devfile/universal-developer-image:latest'
            name: echo-entitlement-key
            script: |
              #!/usr/bin/env bash
              set -e
              if [ "$(params.ibm-entitlement-key)" == "false" ]; then
                echo "Using TechZone provided entitlement key"
                echo -n "$(tasks.get-ibm-entitlement-key.results.secret-value)" > $(results.effective-entitlement-key.path)
              else
                echo "Using user provided entitlement key"
                echo -n "$(params.ibm-entitlement-key)" > $(results.effective-entitlement-key.path)
              fi
    - name: b2bi-install
      runAfter:
        - set-ibm-entitlement-key
      taskSpec:
        metadata: {}
        spec: null
        steps:
          - computeResources: {}
            image: 'quay.io/kishorec/sde:latest'
            name: install-b2bi
            script: |
              #!/bin/bash
              set -e

              export ENTITLED_REGISTRY_KEY="$(tasks.set-ibm-entitlement-key.results.effective-entitlement-key)"
              export ANSIBLE_CONFIG=./ansible.cfg

              export SI_INSTANCEID=dev01
              export SI_VERSION=6.2.1.1

              echo "Cloning Sterling automation repository"
              git clone https://github.com/ckpkishore/ansible-ibm-sterling.git
              cd ansible-ibm-sterling

              ls -ltr

              # Set Helm version
              HELM_VERSION=v3.18.3

              # Download and extract Helm
              curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
              tar -zxvf helm.tar.gz

              # Move helm binary to a local bin directory (e.g., /workspace/bin) and add to PATH
              mkdir -p /workspace/bin
              mv linux-amd64/helm /workspace/bin/helm
              chmod +x /workspace/bin/helm

              # Add it to PATH
              export PATH="/workspace/bin:$PATH"

              # Verify installation
              helm version

              echo "Running B2BI install via Ansible..."
              ansible-playbook playbooks/deploy_sb2b.yml
              echo "B2BI Ansible playbook finished"
    - name: ssp-install
      runAfter:
        - set-ibm-entitlement-key
      taskSpec:
        metadata: {}
        spec: null
        steps:
          - computeResources: {}
            image: 'quay.io/kishorec/sde:latest'
            name: install-ssp
            script: |
              #!/bin/bash
              set -e

              export ENTITLED_REGISTRY_KEY="$(tasks.set-ibm-entitlement-key.results.effective-entitlement-key)"
              export ANSIBLE_CONFIG=./ansible.cfg

              export SSP_INSTANCEID=dev01
              export SSP_VERSION=6.2.1.0-iFix00-2025-07-04

              echo "Cloning Sterling automation repository"
              git clone https://github.com/ckpkishore/ansible-ibm-sterling.git
              cd ansible-ibm-sterling

              ls -ltr

              # Set Helm version
              HELM_VERSION=v3.18.3

              # Download and extract Helm
              curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
              tar -zxvf helm.tar.gz

              # Move helm binary to a local bin directory (e.g., /workspace/bin) and add to PATH
              mkdir -p /workspace/bin
              mv linux-amd64/helm /workspace/bin/helm
              chmod +x /workspace/bin/helm

              # Add it to PATH
              export PATH="/workspace/bin:$PATH"

              # Verify installation
              helm version

              echo "Running SSP install via Ansible..."
              ansible-playbook playbooks/deploy_ssp.yml
              echo "SSP Ansible playbook finished"
    - name: seas-install
      runAfter:
        - set-ibm-entitlement-key
      taskSpec:
        metadata: {}
        spec: null
        steps:
          - computeResources: {}
            image: 'quay.io/kishorec/sde:latest'
            name: install-seas
            script: |
              #!/bin/bash
              set -e

              export ENTITLED_REGISTRY_KEY="$(tasks.set-ibm-entitlement-key.results.effective-entitlement-key)"
              export ANSIBLE_CONFIG=./ansible.cfg

              export SEAS_INSTANCEID=dev01
              export SEAS_VERSION=6.1.0.2.03

              echo "Cloning Sterling automation repository"
              git clone https://github.com/ckpkishore/ansible-ibm-sterling.git
              cd ansible-ibm-sterling

              ls -ltr

              # Set Helm version
              HELM_VERSION=v3.18.3

              # Download and extract Helm
              curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
              tar -zxvf helm.tar.gz

              # Move helm binary to a local bin directory (e.g., /workspace/bin) and add to PATH
              mkdir -p /workspace/bin
              mv linux-amd64/helm /workspace/bin/helm
              chmod +x /workspace/bin/helm

              # Add it to PATH
              export PATH="/workspace/bin:$PATH"

              # Verify installation
              helm version

              echo "Running SEAS install via Ansible..."
              ansible-playbook playbooks/deploy_seas.yml
              echo "SEAS Ansible playbook finished"
    - name: scc-install
      runAfter:
        - set-ibm-entitlement-key
      taskSpec:
        metadata: {}
        spec: null
        steps:
          - computeResources: {}
            image: 'quay.io/kishorec/sde:latest'
            name: install-scc
            script: |
              #!/bin/bash
              set -e

              export ENTITLED_REGISTRY_KEY="$(tasks.set-ibm-entitlement-key.results.effective-entitlement-key)"
              export ANSIBLE_CONFIG=./ansible.cfg

              export SCC_PRODUCTS=CCM
              export SCC_INSTANCEID=dev01
              export SCC_VERSION=6.4.0.0.iFix01_2025-05-19

              echo "Cloning Sterling automation repository"
              git clone https://github.com/ckpkishore/ansible-ibm-sterling.git
              cd ansible-ibm-sterling

              ls -ltr

              # Set Helm version
              HELM_VERSION=v3.18.3

              # Download and extract Helm
              curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
              tar -zxvf helm.tar.gz

              # Move helm binary to a local bin directory (e.g., /workspace/bin) and add to PATH
              mkdir -p /workspace/bin
              mv linux-amd64/helm /workspace/bin/helm
              chmod +x /workspace/bin/helm

              # Add it to PATH
              export PATH="/workspace/bin:$PATH"

              # Verify installation
              helm version

              echo "Running SCC install via Ansible..."
              ansible-playbook playbooks/deploy_scc.yml
              echo "SCC Ansible playbook finished"
